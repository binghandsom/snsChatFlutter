import 'package:sembast/sembast.dart';
import 'package:snschat_flutter/objects/chat/conversation_group.dart';

import '../SembastDB.dart';

class ConversationDBService {
  // Same like mongoDB, this setups what the collection name should be called.
  static const String CONVERSATION_GROUP_STORE_NAME = "conversation_group";

  // Create a instance to perform DB operations
  final _conversationGroupStore = intMapStoreFactory.store(CONVERSATION_GROUP_STORE_NAME);

  Future<Database> get _db async => await SembastDB.instance.database;

  //CRUD
  Future addConversationGroup(ConversationGroup conversationGroup) async {
    await _conversationGroupStore.add(await _db, conversationGroup.toJson());
  }

  Future editConversationGroup(ConversationGroup conversationGroup) async {
    final finder = Finder(filter: Filter.equals("id", conversationGroup.id));

    await _conversationGroupStore.update(await _db, conversationGroup.toJson(), finder: finder);
  }

  Future deleteConversationGroup(String conversationGroupId) async {
    final finder = Finder(filter: Filter.equals("id", conversationGroupId));

    await _conversationGroupStore.delete(await _db, finder: finder);
  }

  Future<ConversationGroup> getSingleConversationGroup(ConversationGroup conversationGroup) async {
    final finder = Finder(filter: Filter.equals("id", conversationGroup.id));
    final recordSnapshot = await _conversationGroupStore.findFirst(await _db, finder: finder);

    return recordSnapshot.value.isNotEmpty ? ConversationGroup.fromJson(recordSnapshot.value) : null;
  }

  Future<List<ConversationGroup>> getAllConversationGroups() async {
    // Auto sort by createdDate, but when showing in chat page, sort these conversations using last unread message's date
    final finder = Finder(sortOrders: [SortOrder('createdDate')]);
    // Find all Conversation Groups
    final recordSnapshots = await _conversationGroupStore.find(await _db, finder: finder);
    List<ConversationGroup> conversationGroupList = recordSnapshots.map((snapshot) {
      final conversationGroup = ConversationGroup.fromJson(snapshot.value);
      print("conversationGroup.id: " + conversationGroup.id);
      print("snapshot.key: " +
          snapshot.key
              .toString()); // The instructor said snapshot.key is uniquely generated by Sembast DB. // TODO: What about the same thing generated by MongoDB?
      conversationGroup.id = snapshot.key.toString(); // The example put this, check if I don't do this what will happen?
      return conversationGroup;
    });
    // .toList(); // example put this, check if I don't put this line of code what will happen?

    return conversationGroupList;
  }
}
